// middleware/authMiddleware.js
const jwt = require('jsonwebtoken');
const User = require('../models/userModel');

/**
 * üß© Middleware: B·∫£o v·ªá route y√™u c·∫ßu ƒëƒÉng nh·∫≠p
 * - Ki·ªÉm tra token JWT h·ª£p l·ªá.
 * - L·∫•y th√¥ng tin user t·ª´ DB (·∫©n password).
 * - G·∫Øn th√¥ng tin user v√†o req.user ƒë·ªÉ controller c√≥ th·ªÉ d√πng.
 */
exports.protect = async (req, res, next) => {
  try {
    let token;

    // 1Ô∏è‚É£ L·∫•y token t·ª´ header Authorization
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
      token = req.headers.authorization.split(' ')[1];
    }

    // 2Ô∏è‚É£ N·∫øu kh√¥ng c√≥ token ‚Üí t·ª´ ch·ªëi truy c·∫≠p
    if (!token) {
      return res.status(401).json({ message: 'Kh√¥ng c√≥ token, t·ª´ ch·ªëi truy c·∫≠p!' });
    }

    // 3Ô∏è‚É£ Gi·∫£i m√£ token b·∫±ng secret key
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'my_secret_key');

    // 4Ô∏è‚É£ T√¨m user t∆∞∆°ng ·ª©ng trong MongoDB
    req.user = await User.findById(decoded.id).select('-password');

    // N·∫øu user kh√¥ng t·ªìn t·∫°i
    if (!req.user) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!' });
    }

    // 5Ô∏è‚É£ N·∫øu DB b·ªã thi·∫øu role ‚Üí l·∫•y role t·ª´ token (d·ª± ph√≤ng)
    if (decoded.role && (!req.user.role || req.user.role !== decoded.role)) {
      req.user.role = decoded.role;
    }

    // üîç Debug log (ch·ªâ n√™n d√πng khi dev)
    console.log('üß† Token decoded:', decoded);
    console.log('üë§ Authenticated user:', req.user?.email, '| Role:', req.user?.role);

    // 6Ô∏è‚É£ Cho ph√©p ƒëi ti·∫øp t·ªõi controller
    next();
  } catch (error) {
    console.error('‚ùå L·ªói x√°c th·ª±c token:', error.message);
    res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!' });
  }
};
