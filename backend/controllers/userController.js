let users = [
  { id: 1, name: "Ph√∫c H·∫≠u", role: "Nh√≥m tr∆∞·ªüng - Backend" },
  { id: 2, name: "Trung T√≠nh", role: "Database" },
  { id: 3, name: "ƒê·∫°i Nguy√™n", role: "Frontend" }
];

// üìñ GET - L·∫•y danh s√°ch ng∆∞·ªùi d√πng
exports.getUsers = (req, res) => {
  res.json(users);
};

// ‚ûï POST - Th√™m ng∆∞·ªùi d√πng m·ªõi
exports.createUser = (req, res) => {
  const { name, role } = req.body;

  if (!name || !role) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin name v√† role." });
  }

  const newUser = { id: Date.now(), name, role };
  users.push(newUser);

  res.status(201).json({
    message: "Th√™m th√†nh vi√™n th√†nh c√¥ng!",
    user: newUser
  });
};

// ‚úèÔ∏è PUT - C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
exports.updateUser = (req, res) => {
  const id = parseInt(req.params.id, 10);
  if (Number.isNaN(id)) {
    return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
  }

  const { name, role } = req.body;
  const index = users.findIndex(u => u.id === id);

  if (index === -1) {
    return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t." });
  }

  users[index] = {
    ...users[index],
    name: name || users[index].name,
    role: role || users[index].role
  };

  res.json({
    message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!",
    user: users[index]
  });
};

// ‚ùå DELETE - X√≥a ng∆∞·ªùi d√πng theo ID
exports.deleteUser = (req, res) => {
  const id = parseInt(req.params.id, 10);
  if (Number.isNaN(id)) {
    return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
  }

  const index = users.findIndex(u => u.id === id);

  if (index === -1) {
    return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng c·∫ßn x√≥a." });
  }

  const [deletedUser] = users.splice(index, 1);

  res.json({
    message: "X√≥a th√†nh vi√™n th√†nh c√¥ng!",
    deleted: deletedUser
  });
};
