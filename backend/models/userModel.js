// models/userModel.js
const mongoose = require('mongoose');

// ====================== üß© USER SCHEMA ====================== //
const userSchema = new mongoose.Schema(
  {
    // H·ªç t√™n ng∆∞·ªùi d√πng
    name: {
      type: String,
      required: [true, 'Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng!'],
      trim: true,
    },

    // Email duy nh·∫•t cho m·ªói t√†i kho·∫£n
    email: {
      type: String,
      required: [true, 'Vui l√≤ng nh·∫≠p email!'],
      unique: true,
      lowercase: true,
      match: [/^\S+@\S+\.\S+$/, 'Email kh√¥ng h·ª£p l·ªá!'],
    },

    // M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng bcrypt
    password: {
      type: String,
      required: [true, 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!'],
      minlength: [6, 'M·∫≠t kh·∫©u t·ªëi thi·ªÉu 6 k√Ω t·ª±!'],
    },

    // Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng
    role: {
      type: String,
      // Th√™m 'moderator' cho ph√¢n quy·ªÅn n√¢ng cao (Ho·∫°t ƒë·ªông 2)
      enum: ['user', 'admin', 'moderator'],
      default: 'user',
    },

    // ================== HO·∫†T ƒê·ªòNG 4: N√ÇNG CAO ==================
    avatar: {
      type: String,
      default: '',
      comment: 'ƒê∆∞·ªùng d·∫´n ·∫£nh ƒë·∫°i di·ªán (Cloudinary URL)',
    },
     // Fields for password reset flow
     resetPasswordToken: { type: String },
     resetPasswordExpire: { type: Date },
  },
  {
    timestamps: true, // ‚úÖ T·ª± ƒë·ªông t·∫°o createdAt & updatedAt
  }
);

// ====================== üß© EXPORT MODEL ====================== //
const User = mongoose.model('User', userSchema);
module.exports = User;
