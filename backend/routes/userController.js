// controllers/userController.js
const User = require('../models/userModel');
const bcrypt = require('bcryptjs');

// ===========================================================
// üß© HO·∫†T ƒê·ªòNG 2: TH√îNG TIN C√Å NH√ÇN (PROFILE)
// ===========================================================

// [GET] /api/users/profile ‚Üí L·∫•y th√¥ng tin c√° nh√¢n
exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select('-password');
    if (!user)
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });

    res.status(200).json({
      message: '‚úÖ L·∫•y th√¥ng tin c√° nh√¢n th√†nh c√¥ng!',
      user,
    });
  } catch (err) {
    console.error('‚ùå L·ªói getProfile:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin c√° nh√¢n!' });
  }
};

// [PUT] /api/users/profile ‚Üí C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
exports.updateProfile = async (req, res) => {
  try {
    const { name, password } = req.body;
    const user = await User.findById(req.user._id);

    if (!user)
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });

    if (name) user.name = name;
    if (password) user.password = await bcrypt.hash(password, 10);

    await user.save();

    res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!',
      user: { id: user._id, name: user.name, email: user.email },
    });
  } catch (err) {
    console.error('‚ùå L·ªói updateProfile:', err);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t th√¥ng tin!' });
  }
};

// ===========================================================
// üß© HO·∫†T ƒê·ªòNG 3: CRUD QU·∫¢N L√ù USER (ADMIN)
// ===========================================================

// [GET] /api/users ‚Üí Ch·ªâ Admin ƒë∆∞·ª£c xem danh s√°ch user
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password').sort({ createdAt: -1 });
    res.status(200).json({
      message: '‚úÖ L·∫•y danh s√°ch user th√†nh c√¥ng!',
      total: users.length,
      users,
    });
  } catch (err) {
    console.error('‚ùå L·ªói getUsers:', err);
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch user!' });
  }
};

// [POST] /api/users ‚Üí T·∫°o user m·ªõi (ch·ªâ admin)
exports.createUser = async (req, res) => {
  try {
    const { name, role, email, password } = req.body;

    if (!name || !email)
      return res.status(400).json({ message: 'Thi·∫øu t√™n ho·∫∑c email!' });

    const existing = await User.findOne({ email });
    if (existing)
      return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i!' });

    const hashedPassword = await bcrypt.hash(password || '123456', 10);
    const newUser = await User.create({
      name,
      email,
      password: hashedPassword,
      role: role || 'user',
    });

    res.status(201).json({
      message: '‚úÖ T·∫°o user th√†nh c√¥ng!',
      user: {
        id: newUser._id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
      },
    });
  } catch (err) {
    console.error('‚ùå L·ªói createUser:', err);
    res.status(500).json({ message: 'L·ªói server khi t·∫°o user!' });
  }
};

// [PUT] /api/users/:id ‚Üí Admin ho·∫∑c ch√≠nh ch·ªß c·∫≠p nh·∫≠t user
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, role, email } = req.body;

    // Ki·ªÉm tra quy·ªÅn
    if (req.user.role !== 'admin' && req.user._id.toString() !== id)
      return res
        .status(403)
        .json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t user n√†y!' });

    const updated = await User.findByIdAndUpdate(
      id,
      { name, role, email },
      { new: true }
    ).select('-password');

    if (!updated)
      return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i!' });

    res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t user th√†nh c√¥ng!',
      user: updated,
    });
  } catch (err) {
    console.error('‚ùå L·ªói updateUser:', err);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t user!' });
  }
};

// [DELETE] /api/users/:id ‚Üí Admin ho·∫∑c ch√≠nh ch·ªß x√≥a user
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // Ki·ªÉm tra quy·ªÅn
    if (req.user.role !== 'admin' && req.user._id.toString() !== id)
      return res
        .status(403)
        .json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a user n√†y!' });

    const deleted = await User.findByIdAndDelete(id);
    if (!deleted)
      return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i!' });

    res.status(200).json({ message: '‚úÖ X√≥a user th√†nh c√¥ng!' });
  } catch (err) {
    console.error('‚ùå L·ªói deleteUser:', err);
    res.status(500).json({ message: 'L·ªói server khi x√≥a user!' });
  }
};
