// ===========================================================
// üåü SERVER.JS ‚Äî BACKEND BU·ªîI 5: USER MANAGEMENT FULL
// ===========================================================

require("dotenv").config({ path: require("path").join(__dirname, ".env") });
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const path = require("path");

// üåü Import c√°c routes
const authRoutes = require(path.join(__dirname, "routes", "auth"));
const userRoutes = require(path.join(__dirname, "routes", "user"));

// üåü Kh·ªüi t·∫°o app Express
const app = express();
const PORT = process.env.PORT || 4000;

// ===========================================================
// ‚öôÔ∏è C·∫§U H√åNH CORS CHU·∫®N (Local + Ngrok)
// ===========================================================
const allowedOrigins = [
  "http://localhost:3001", // ‚úÖ React local
  "https://microelectronic-corrin-strung.ngrok-free.dev", // ‚úÖ Ngrok
];

const corsOptions = {
  origin: (origin, callback) => {
    if (!origin) return callback(null, true); // Cho ph√©p Postman
    if (allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      console.warn("üö´ Blocked by CORS:", origin);
      callback(new Error("Not allowed by CORS"));
    }
  },
  methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"],
  credentials: true,
  optionsSuccessStatus: 204,
};

// ‚úÖ √Åp d·ª•ng CORS cho to√†n b·ªô app
app.use(cors(corsOptions));
app.options("*", cors(corsOptions)); // Cho ph√©p preflight

// ===========================================================
// üß∞ Middleware kh√°c
// ===========================================================
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‚úÖ Debug log
app.use((req, res, next) => {
  console.log(`‚û°Ô∏è ${req.method} ${req.originalUrl}`);
  if (["POST", "PUT", "PATCH"].includes(req.method)) {
    console.log("   üì¶ Body:", req.body);
  }
  if (req.headers.origin) {
    console.log("   üåê Origin:", req.headers.origin);
  }
  if (req.headers.authorization) {
    console.log("   üîë Token:", req.headers.authorization);
  }
  next();
});

// ===========================================================
// üè† Route c∆° b·∫£n
// ===========================================================
app.get("/", (req, res) => {
  res.send("üöÄ Server is running successfully with Authentication + CRUD!");
});

app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    mongooseReadyState: mongoose.connection.readyState,
  });
});

// ===========================================================
// üóÑÔ∏è K·∫æT N·ªêI MONGODB
// ===========================================================
mongoose.set("strictQuery", false);
mongoose.set("bufferTimeoutMS", 60000);

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log("‚úÖ MongoDB connected successfully");
// Mount routes
  app.use("/api/auth", authRoutes);
  app.use("/api/users", userRoutes);

    // Kh·ªüi ƒë·ªông server
    app.listen(PORT, "0.0.0.0", () => {
      console.log(`‚úÖ Server running on port ${PORT}`);
      console.log("üß† mongoose.readyState =", mongoose.connection.readyState);
    });
  })
  .catch((err) => {
    console.error("‚ùå MongoDB connection error:", err);
  });

// ===========================================================
// ‚öôÔ∏è Middleware x·ª≠ l√Ω l·ªói
// ===========================================================
app.use((err, req, res, next) => {
  if (err.message === "Not allowed by CORS") {
    console.error("‚ùå CORS Error:", req.headers.origin);
    return res.status(403).json({ message: "CORS: Origin not allowed" });
  }
  console.error("‚ùå Server Error:", err);
  res.status(500).json({ message: "Internal Server Error" });
});